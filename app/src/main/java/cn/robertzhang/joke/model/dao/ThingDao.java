package cn.robertzhang.joke.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import cn.robertzhang.joke.model.entities.one.Thing;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table THING.
*/
public class ThingDao extends AbstractDao<Thing, Long> {

    public static final String TABLENAME = "THING";

    /**
     * Properties of entity Thing.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StrLastUpdateDate = new Property(1, String.class, "strLastUpdateDate", false, "STR_LAST_UPDATE_DATE");
        public final static Property StrPn = new Property(2, String.class, "strPn", false, "STR_PN");
        public final static Property StrBu = new Property(3, String.class, "strBu", false, "STR_BU");
        public final static Property StrTm = new Property(4, String.class, "strTm", false, "STR_TM");
        public final static Property StrWu = new Property(5, String.class, "strWu", false, "STR_WU");
        public final static Property StrId = new Property(6, String.class, "strId", false, "STR_ID");
        public final static Property StrTt = new Property(7, String.class, "strTt", false, "STR_TT");
        public final static Property StrTc = new Property(8, String.class, "strTc", false, "STR_TC");
    };


    public ThingDao(DaoConfig config) {
        super(config);
    }
    
    public ThingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'THING' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'STR_LAST_UPDATE_DATE' TEXT," + // 1: strLastUpdateDate
                "'STR_PN' TEXT," + // 2: strPn
                "'STR_BU' TEXT," + // 3: strBu
                "'STR_TM' TEXT," + // 4: strTm
                "'STR_WU' TEXT," + // 5: strWu
                "'STR_ID' TEXT," + // 6: strId
                "'STR_TT' TEXT," + // 7: strTt
                "'STR_TC' TEXT);"); // 8: strTc
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Thing entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String strLastUpdateDate = entity.getStrLastUpdateDate();
        if (strLastUpdateDate != null) {
            stmt.bindString(2, strLastUpdateDate);
        }
 
        String strPn = entity.getStrPn();
        if (strPn != null) {
            stmt.bindString(3, strPn);
        }
 
        String strBu = entity.getStrBu();
        if (strBu != null) {
            stmt.bindString(4, strBu);
        }
 
        String strTm = entity.getStrTm();
        if (strTm != null) {
            stmt.bindString(5, strTm);
        }
 
        String strWu = entity.getStrWu();
        if (strWu != null) {
            stmt.bindString(6, strWu);
        }
 
        String strId = entity.getStrId();
        if (strId != null) {
            stmt.bindString(7, strId);
        }
 
        String strTt = entity.getStrTt();
        if (strTt != null) {
            stmt.bindString(8, strTt);
        }
 
        String strTc = entity.getStrTc();
        if (strTc != null) {
            stmt.bindString(9, strTc);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Thing readEntity(Cursor cursor, int offset) {
        Thing entity = new Thing( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // strLastUpdateDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // strPn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // strBu
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // strTm
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // strWu
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // strId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // strTt
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // strTc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Thing entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStrLastUpdateDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStrPn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStrBu(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStrTm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStrWu(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStrId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStrTt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStrTc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Thing entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Thing entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
