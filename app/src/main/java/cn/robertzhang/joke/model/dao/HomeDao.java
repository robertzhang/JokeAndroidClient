package cn.robertzhang.joke.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import cn.robertzhang.joke.model.entities.one.Home;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HOME.
*/
public class HomeDao extends AbstractDao<Home, Long> {

    public static final String TABLENAME = "HOME";

    /**
     * Properties of entity Home.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StrLastUpdateDate = new Property(1, String.class, "strLastUpdateDate", false, "STR_LAST_UPDATE_DATE");
        public final static Property StrDayDiffer = new Property(2, String.class, "strDayDiffer", false, "STR_DAY_DIFFER");
        public final static Property StrHpId = new Property(3, String.class, "strHpId", false, "STR_HP_ID");
        public final static Property StrHpTitle = new Property(4, String.class, "strHpTitle", false, "STR_HP_TITLE");
        public final static Property StrThumbnailUrl = new Property(5, String.class, "strThumbnailUrl", false, "STR_THUMBNAIL_URL");
        public final static Property StrOriginalImgUrl = new Property(6, String.class, "strOriginalImgUrl", false, "STR_ORIGINAL_IMG_URL");
        public final static Property StrAuthor = new Property(7, String.class, "strAuthor", false, "STR_AUTHOR");
        public final static Property StrContent = new Property(8, String.class, "strContent", false, "STR_CONTENT");
        public final static Property StrMarketTime = new Property(9, String.class, "strMarketTime", false, "STR_MARKET_TIME");
        public final static Property SWebLk = new Property(10, String.class, "sWebLk", false, "S_WEB_LK");
        public final static Property StrPn = new Property(11, String.class, "strPn", false, "STR_PN");
        public final static Property WImgUrl = new Property(12, String.class, "wImgUrl", false, "W_IMG_URL");
    };


    public HomeDao(DaoConfig config) {
        super(config);
    }
    
    public HomeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HOME' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'STR_LAST_UPDATE_DATE' TEXT," + // 1: strLastUpdateDate
                "'STR_DAY_DIFFER' TEXT," + // 2: strDayDiffer
                "'STR_HP_ID' TEXT," + // 3: strHpId
                "'STR_HP_TITLE' TEXT," + // 4: strHpTitle
                "'STR_THUMBNAIL_URL' TEXT," + // 5: strThumbnailUrl
                "'STR_ORIGINAL_IMG_URL' TEXT," + // 6: strOriginalImgUrl
                "'STR_AUTHOR' TEXT," + // 7: strAuthor
                "'STR_CONTENT' TEXT," + // 8: strContent
                "'STR_MARKET_TIME' TEXT," + // 9: strMarketTime
                "'S_WEB_LK' TEXT," + // 10: sWebLk
                "'STR_PN' TEXT," + // 11: strPn
                "'W_IMG_URL' TEXT);"); // 12: wImgUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HOME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Home entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String strLastUpdateDate = entity.getStrLastUpdateDate();
        if (strLastUpdateDate != null) {
            stmt.bindString(2, strLastUpdateDate);
        }
 
        String strDayDiffer = entity.getStrDayDiffer();
        if (strDayDiffer != null) {
            stmt.bindString(3, strDayDiffer);
        }
 
        String strHpId = entity.getStrHpId();
        if (strHpId != null) {
            stmt.bindString(4, strHpId);
        }
 
        String strHpTitle = entity.getStrHpTitle();
        if (strHpTitle != null) {
            stmt.bindString(5, strHpTitle);
        }
 
        String strThumbnailUrl = entity.getStrThumbnailUrl();
        if (strThumbnailUrl != null) {
            stmt.bindString(6, strThumbnailUrl);
        }
 
        String strOriginalImgUrl = entity.getStrOriginalImgUrl();
        if (strOriginalImgUrl != null) {
            stmt.bindString(7, strOriginalImgUrl);
        }
 
        String strAuthor = entity.getStrAuthor();
        if (strAuthor != null) {
            stmt.bindString(8, strAuthor);
        }
 
        String strContent = entity.getStrContent();
        if (strContent != null) {
            stmt.bindString(9, strContent);
        }
 
        String strMarketTime = entity.getStrMarketTime();
        if (strMarketTime != null) {
            stmt.bindString(10, strMarketTime);
        }
 
        String sWebLk = entity.getSWebLk();
        if (sWebLk != null) {
            stmt.bindString(11, sWebLk);
        }
 
        String strPn = entity.getStrPn();
        if (strPn != null) {
            stmt.bindString(12, strPn);
        }
 
        String wImgUrl = entity.getWImgUrl();
        if (wImgUrl != null) {
            stmt.bindString(13, wImgUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Home readEntity(Cursor cursor, int offset) {
        Home entity = new Home( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // strLastUpdateDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // strDayDiffer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // strHpId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // strHpTitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // strThumbnailUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // strOriginalImgUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // strAuthor
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // strContent
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // strMarketTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sWebLk
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // strPn
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // wImgUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Home entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStrLastUpdateDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStrDayDiffer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStrHpId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStrHpTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStrThumbnailUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStrOriginalImgUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStrAuthor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStrContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStrMarketTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSWebLk(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStrPn(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWImgUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Home entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Home entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
