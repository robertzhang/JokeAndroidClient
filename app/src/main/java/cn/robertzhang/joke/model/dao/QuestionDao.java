package cn.robertzhang.joke.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import cn.robertzhang.joke.model.entities.one.Question;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QUESTION.
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StrLastUpdateDate = new Property(1, String.class, "strLastUpdateDate", false, "STR_LAST_UPDATE_DATE");
        public final static Property StrDayDiffer = new Property(2, String.class, "strDayDiffer", false, "STR_DAY_DIFFER");
        public final static Property SWebLk = new Property(3, String.class, "sWebLk", false, "S_WEB_LK");
        public final static Property StrPraiseNumber = new Property(4, String.class, "strPraiseNumber", false, "STR_PRAISE_NUMBER");
        public final static Property StrQuestionId = new Property(5, String.class, "strQuestionId", false, "STR_QUESTION_ID");
        public final static Property StrQuestionTitle = new Property(6, String.class, "strQuestionTitle", false, "STR_QUESTION_TITLE");
        public final static Property StrQuestionContent = new Property(7, String.class, "strQuestionContent", false, "STR_QUESTION_CONTENT");
        public final static Property StrAnswerTitle = new Property(8, String.class, "strAnswerTitle", false, "STR_ANSWER_TITLE");
        public final static Property StrAnswerContent = new Property(9, String.class, "strAnswerContent", false, "STR_ANSWER_CONTENT");
        public final static Property StrQuestionMarketTime = new Property(10, String.class, "strQuestionMarketTime", false, "STR_QUESTION_MARKET_TIME");
        public final static Property SEditor = new Property(11, String.class, "sEditor", false, "S_EDITOR");
    };


    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QUESTION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'STR_LAST_UPDATE_DATE' TEXT," + // 1: strLastUpdateDate
                "'STR_DAY_DIFFER' TEXT," + // 2: strDayDiffer
                "'S_WEB_LK' TEXT," + // 3: sWebLk
                "'STR_PRAISE_NUMBER' TEXT," + // 4: strPraiseNumber
                "'STR_QUESTION_ID' TEXT," + // 5: strQuestionId
                "'STR_QUESTION_TITLE' TEXT," + // 6: strQuestionTitle
                "'STR_QUESTION_CONTENT' TEXT," + // 7: strQuestionContent
                "'STR_ANSWER_TITLE' TEXT," + // 8: strAnswerTitle
                "'STR_ANSWER_CONTENT' TEXT," + // 9: strAnswerContent
                "'STR_QUESTION_MARKET_TIME' TEXT," + // 10: strQuestionMarketTime
                "'S_EDITOR' TEXT);"); // 11: sEditor
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUESTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String strLastUpdateDate = entity.getStrLastUpdateDate();
        if (strLastUpdateDate != null) {
            stmt.bindString(2, strLastUpdateDate);
        }
 
        String strDayDiffer = entity.getStrDayDiffer();
        if (strDayDiffer != null) {
            stmt.bindString(3, strDayDiffer);
        }
 
        String sWebLk = entity.getSWebLk();
        if (sWebLk != null) {
            stmt.bindString(4, sWebLk);
        }
 
        String strPraiseNumber = entity.getStrPraiseNumber();
        if (strPraiseNumber != null) {
            stmt.bindString(5, strPraiseNumber);
        }
 
        String strQuestionId = entity.getStrQuestionId();
        if (strQuestionId != null) {
            stmt.bindString(6, strQuestionId);
        }
 
        String strQuestionTitle = entity.getStrQuestionTitle();
        if (strQuestionTitle != null) {
            stmt.bindString(7, strQuestionTitle);
        }
 
        String strQuestionContent = entity.getStrQuestionContent();
        if (strQuestionContent != null) {
            stmt.bindString(8, strQuestionContent);
        }
 
        String strAnswerTitle = entity.getStrAnswerTitle();
        if (strAnswerTitle != null) {
            stmt.bindString(9, strAnswerTitle);
        }
 
        String strAnswerContent = entity.getStrAnswerContent();
        if (strAnswerContent != null) {
            stmt.bindString(10, strAnswerContent);
        }
 
        String strQuestionMarketTime = entity.getStrQuestionMarketTime();
        if (strQuestionMarketTime != null) {
            stmt.bindString(11, strQuestionMarketTime);
        }
 
        String sEditor = entity.getSEditor();
        if (sEditor != null) {
            stmt.bindString(12, sEditor);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // strLastUpdateDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // strDayDiffer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sWebLk
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // strPraiseNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // strQuestionId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // strQuestionTitle
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // strQuestionContent
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // strAnswerTitle
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // strAnswerContent
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // strQuestionMarketTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // sEditor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStrLastUpdateDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStrDayDiffer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSWebLk(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStrPraiseNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStrQuestionId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStrQuestionTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStrQuestionContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStrAnswerTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStrAnswerContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStrQuestionMarketTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSEditor(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
