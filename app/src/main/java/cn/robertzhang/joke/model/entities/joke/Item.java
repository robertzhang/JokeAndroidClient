package cn.robertzhang.joke.model.entities.joke;

import cn.robertzhang.joke.app.JokeApplication;
import cn.robertzhang.joke.model.dao.DaoSession;
import cn.robertzhang.joke.model.dao.ItemDao;
import cn.robertzhang.joke.model.dao.UserDao;
import cn.robertzhang.joke.model.dao.VotesDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ITEM.
 */
public class Item {

    private Long id;
    private String format;
    private String image;
    private Integer published_at;
    private String tag;
    private Integer created_at;
    private String content;
    private String state;
    private String type;
    private Integer comments_count;
    private Integer share_count;
    private Boolean allow_comment;
    private String high_url;
    private String low_url;
    private String pic_url;
    private String loop;
    private Long userid;
    private Long voteid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemDao myDao;

    private User user;
    private Long user__resolvedKey;

    private Votes votes;
    private Long votes__resolvedKey;


    public Item() {
    }

    public Item(Long id) {
        this.id = id;
    }

    public Item(Long id, String format, String image, Integer published_at, String tag, Integer created_at, String content, String state, String type, Integer comments_count, Integer share_count, Boolean allow_comment, String high_url, String low_url, String pic_url, String loop, Long userid, Long voteid) {
        this.id = id;
        this.format = format;
        this.image = image;
        this.published_at = published_at;
        this.tag = tag;
        this.created_at = created_at;
        this.content = content;
        this.state = state;
        this.type = type;
        this.comments_count = comments_count;
        this.share_count = share_count;
        this.allow_comment = allow_comment;
        this.high_url = high_url;
        this.low_url = low_url;
        this.pic_url = pic_url;
        this.loop = loop;
        this.userid = userid;
        this.voteid = voteid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFormat() {
        return format;
    }

    public void setFormat(String format) {
        this.format = format;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public Integer getPublished_at() {
        return published_at;
    }

    public void setPublished_at(Integer published_at) {
        this.published_at = published_at;
    }

    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public Integer getCreated_at() {
        return created_at;
    }

    public void setCreated_at(Integer created_at) {
        this.created_at = created_at;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Integer getComments_count() {
        return comments_count;
    }

    public void setComments_count(Integer comments_count) {
        this.comments_count = comments_count;
    }

    public Integer getShare_count() {
        return share_count;
    }

    public void setShare_count(Integer share_count) {
        this.share_count = share_count;
    }

    public Boolean getAllow_comment() {
        return allow_comment;
    }

    public void setAllow_comment(Boolean allow_comment) {
        this.allow_comment = allow_comment;
    }

    public String getHigh_url() {
        return high_url;
    }

    public void setHigh_url(String high_url) {
        this.high_url = high_url;
    }

    public String getLow_url() {
        return low_url;
    }

    public void setLow_url(String low_url) {
        this.low_url = low_url;
    }

    public String getPic_url() {
        return pic_url;
    }

    public void setPic_url(String pic_url) {
        this.pic_url = pic_url;
    }

    public String getLoop() {
        return loop;
    }

    public void setLoop(String loop) {
        this.loop = loop;
    }

    public Long getUserid() {
        return userid;
    }

    public void setUserid(Long userid) {
        this.userid = userid;
    }

    public Long getVoteid() {
        return voteid;
    }

    public void setVoteid(Long voteid) {
        this.voteid = voteid;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.userid;
        if (daoSession != null) {
            if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
                if (daoSession == null) {
                    throw new DaoException("Entity is detached from DAO context");
                }
                UserDao targetDao = daoSession.getUserDao();
                User userNew = targetDao.load(__key);
                synchronized (this) {
                    user = userNew;
                    user__resolvedKey = __key;
                }
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userid = user == null ? null : user.getId();
            user__resolvedKey = userid;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Votes getVotes() {
        Long __key = this.voteid;
        if (daoSession != null) {
            if (votes__resolvedKey == null || !votes__resolvedKey.equals(__key)) {
                if (daoSession == null) {
                    throw new DaoException("Entity is detached from DAO context");
                }
                VotesDao targetDao = daoSession.getVotesDao();
                Votes votesNew = targetDao.load(__key);
                synchronized (this) {
                    votes = votesNew;
                    votes__resolvedKey = __key;
                }
            }
        }
        return votes;
    }

    public void setVotes(Votes votes) {
        synchronized (this) {
            this.votes = votes;
            voteid = votes == null ? null : votes.getId();
            votes__resolvedKey = voteid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
