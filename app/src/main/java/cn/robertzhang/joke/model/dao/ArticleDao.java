package cn.robertzhang.joke.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import cn.robertzhang.joke.model.entities.one.Article;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE.
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StrLastUpdateDate = new Property(1, String.class, "strLastUpdateDate", false, "STR_LAST_UPDATE_DATE");
        public final static Property StrContent = new Property(2, String.class, "strContent", false, "STR_CONTENT");
        public final static Property SWebLk = new Property(3, String.class, "sWebLk", false, "S_WEB_LK");
        public final static Property WImgUrl = new Property(4, String.class, "wImgUrl", false, "W_IMG_URL");
        public final static Property SRdNum = new Property(5, String.class, "sRdNum", false, "S_RD_NUM");
        public final static Property StrPraiseNumber = new Property(6, String.class, "strPraiseNumber", false, "STR_PRAISE_NUMBER");
        public final static Property StrContDayDiffer = new Property(7, String.class, "strContDayDiffer", false, "STR_CONT_DAY_DIFFER");
        public final static Property StrContentId = new Property(8, String.class, "strContentId", false, "STR_CONTENT_ID");
        public final static Property StrContTitle = new Property(9, String.class, "strContTitle", false, "STR_CONT_TITLE");
        public final static Property StrContAuthor = new Property(10, String.class, "strContAuthor", false, "STR_CONT_AUTHOR");
        public final static Property StrContAuthorIntroduce = new Property(11, String.class, "strContAuthorIntroduce", false, "STR_CONT_AUTHOR_INTRODUCE");
        public final static Property StrContMarketTime = new Property(12, String.class, "strContMarketTime", false, "STR_CONT_MARKET_TIME");
        public final static Property SGW = new Property(13, String.class, "sGW", false, "S_GW");
        public final static Property SAuth = new Property(14, String.class, "sAuth", false, "S_AUTH");
        public final static Property SWbN = new Property(15, String.class, "sWbN", false, "S_WB_N");
        public final static Property SubTitle = new Property(16, String.class, "subTitle", false, "SUB_TITLE");
    };


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'STR_LAST_UPDATE_DATE' TEXT," + // 1: strLastUpdateDate
                "'STR_CONTENT' TEXT," + // 2: strContent
                "'S_WEB_LK' TEXT," + // 3: sWebLk
                "'W_IMG_URL' TEXT," + // 4: wImgUrl
                "'S_RD_NUM' TEXT," + // 5: sRdNum
                "'STR_PRAISE_NUMBER' TEXT," + // 6: strPraiseNumber
                "'STR_CONT_DAY_DIFFER' TEXT," + // 7: strContDayDiffer
                "'STR_CONTENT_ID' TEXT," + // 8: strContentId
                "'STR_CONT_TITLE' TEXT," + // 9: strContTitle
                "'STR_CONT_AUTHOR' TEXT," + // 10: strContAuthor
                "'STR_CONT_AUTHOR_INTRODUCE' TEXT," + // 11: strContAuthorIntroduce
                "'STR_CONT_MARKET_TIME' TEXT," + // 12: strContMarketTime
                "'S_GW' TEXT," + // 13: sGW
                "'S_AUTH' TEXT," + // 14: sAuth
                "'S_WB_N' TEXT," + // 15: sWbN
                "'SUB_TITLE' TEXT);"); // 16: subTitle
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String strLastUpdateDate = entity.getStrLastUpdateDate();
        if (strLastUpdateDate != null) {
            stmt.bindString(2, strLastUpdateDate);
        }
 
        String strContent = entity.getStrContent();
        if (strContent != null) {
            stmt.bindString(3, strContent);
        }
 
        String sWebLk = entity.getSWebLk();
        if (sWebLk != null) {
            stmt.bindString(4, sWebLk);
        }
 
        String wImgUrl = entity.getWImgUrl();
        if (wImgUrl != null) {
            stmt.bindString(5, wImgUrl);
        }
 
        String sRdNum = entity.getSRdNum();
        if (sRdNum != null) {
            stmt.bindString(6, sRdNum);
        }
 
        String strPraiseNumber = entity.getStrPraiseNumber();
        if (strPraiseNumber != null) {
            stmt.bindString(7, strPraiseNumber);
        }
 
        String strContDayDiffer = entity.getStrContDayDiffer();
        if (strContDayDiffer != null) {
            stmt.bindString(8, strContDayDiffer);
        }
 
        String strContentId = entity.getStrContentId();
        if (strContentId != null) {
            stmt.bindString(9, strContentId);
        }
 
        String strContTitle = entity.getStrContTitle();
        if (strContTitle != null) {
            stmt.bindString(10, strContTitle);
        }
 
        String strContAuthor = entity.getStrContAuthor();
        if (strContAuthor != null) {
            stmt.bindString(11, strContAuthor);
        }
 
        String strContAuthorIntroduce = entity.getStrContAuthorIntroduce();
        if (strContAuthorIntroduce != null) {
            stmt.bindString(12, strContAuthorIntroduce);
        }
 
        String strContMarketTime = entity.getStrContMarketTime();
        if (strContMarketTime != null) {
            stmt.bindString(13, strContMarketTime);
        }
 
        String sGW = entity.getSGW();
        if (sGW != null) {
            stmt.bindString(14, sGW);
        }
 
        String sAuth = entity.getSAuth();
        if (sAuth != null) {
            stmt.bindString(15, sAuth);
        }
 
        String sWbN = entity.getSWbN();
        if (sWbN != null) {
            stmt.bindString(16, sWbN);
        }
 
        String subTitle = entity.getSubTitle();
        if (subTitle != null) {
            stmt.bindString(17, subTitle);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // strLastUpdateDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // strContent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sWebLk
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // wImgUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sRdNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // strPraiseNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // strContDayDiffer
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // strContentId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // strContTitle
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // strContAuthor
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // strContAuthorIntroduce
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // strContMarketTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sGW
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sAuth
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // sWbN
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // subTitle
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStrLastUpdateDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStrContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSWebLk(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWImgUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSRdNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStrPraiseNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStrContDayDiffer(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStrContentId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStrContTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStrContAuthor(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStrContAuthorIntroduce(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStrContMarketTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSGW(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSAuth(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSWbN(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSubTitle(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
