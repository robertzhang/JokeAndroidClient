package cn.robertzhang.joke.model.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import cn.robertzhang.joke.model.entities.joke.Item;
import cn.robertzhang.joke.model.entities.joke.User;
import cn.robertzhang.joke.model.entities.joke.Votes;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ITEM.
*/
public class ItemDao extends AbstractDao<Item, Long> {

    public static final String TABLENAME = "ITEM";

    /**
     * Properties of entity Item.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Format = new Property(1, String.class, "format", false, "FORMAT");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Published_at = new Property(3, Integer.class, "published_at", false, "PUBLISHED_AT");
        public final static Property Tag = new Property(4, String.class, "tag", false, "TAG");
        public final static Property Created_at = new Property(5, Integer.class, "created_at", false, "CREATED_AT");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property State = new Property(7, String.class, "state", false, "STATE");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Comments_count = new Property(9, Integer.class, "comments_count", false, "COMMENTS_COUNT");
        public final static Property Share_count = new Property(10, Integer.class, "share_count", false, "SHARE_COUNT");
        public final static Property Allow_comment = new Property(11, Boolean.class, "allow_comment", false, "ALLOW_COMMENT");
        public final static Property High_url = new Property(12, String.class, "high_url", false, "HIGH_URL");
        public final static Property Low_url = new Property(13, String.class, "low_url", false, "LOW_URL");
        public final static Property Pic_url = new Property(14, String.class, "pic_url", false, "PIC_URL");
        public final static Property Loop = new Property(15, String.class, "loop", false, "LOOP");
        public final static Property Userid = new Property(16, Long.class, "userid", false, "USERID");
        public final static Property Voteid = new Property(17, Long.class, "voteid", false, "VOTEID");
    };

    private DaoSession daoSession;


    public ItemDao(DaoConfig config) {
        super(config);
    }
    
    public ItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FORMAT' TEXT," + // 1: format
                "'IMAGE' TEXT," + // 2: image
                "'PUBLISHED_AT' INTEGER," + // 3: published_at
                "'TAG' TEXT," + // 4: tag
                "'CREATED_AT' INTEGER," + // 5: created_at
                "'CONTENT' TEXT," + // 6: content
                "'STATE' TEXT," + // 7: state
                "'TYPE' TEXT," + // 8: type
                "'COMMENTS_COUNT' INTEGER," + // 9: comments_count
                "'SHARE_COUNT' INTEGER," + // 10: share_count
                "'ALLOW_COMMENT' INTEGER," + // 11: allow_comment
                "'HIGH_URL' TEXT," + // 12: high_url
                "'LOW_URL' TEXT," + // 13: low_url
                "'PIC_URL' TEXT," + // 14: pic_url
                "'LOOP' TEXT," + // 15: loop
                "'USERID' INTEGER," + // 16: userid
                "'VOTEID' INTEGER);"); // 17: voteid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Item entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(2, format);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        Integer published_at = entity.getPublished_at();
        if (published_at != null) {
            stmt.bindLong(4, published_at);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(5, tag);
        }
 
        Integer created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(6, created_at);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(8, state);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        Integer comments_count = entity.getComments_count();
        if (comments_count != null) {
            stmt.bindLong(10, comments_count);
        }
 
        Integer share_count = entity.getShare_count();
        if (share_count != null) {
            stmt.bindLong(11, share_count);
        }
 
        Boolean allow_comment = entity.getAllow_comment();
        if (allow_comment != null) {
            stmt.bindLong(12, allow_comment ? 1l: 0l);
        }
 
        String high_url = entity.getHigh_url();
        if (high_url != null) {
            stmt.bindString(13, high_url);
        }
 
        String low_url = entity.getLow_url();
        if (low_url != null) {
            stmt.bindString(14, low_url);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(15, pic_url);
        }
 
        String loop = entity.getLoop();
        if (loop != null) {
            stmt.bindString(16, loop);
        }
 
        Long userid = entity.getUserid();
        if (userid != null) {
            stmt.bindLong(17, userid);
        }
 
        Long voteid = entity.getVoteid();
        if (voteid != null) {
            stmt.bindLong(18, voteid);
        }
    }

    @Override
    protected void attachEntity(Item entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Item readEntity(Cursor cursor, int offset) {
        Item entity = new Item( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // format
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // published_at
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tag
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // created_at
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // state
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // comments_count
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // share_count
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // allow_comment
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // high_url
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // low_url
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pic_url
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // loop
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // userid
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17) // voteid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Item entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFormat(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPublished_at(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreated_at(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setState(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComments_count(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setShare_count(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setAllow_comment(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setHigh_url(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLow_url(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPic_url(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLoop(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserid(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setVoteid(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Item entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Item entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getVotesDao().getAllColumns());
            builder.append(" FROM ITEM T");
            builder.append(" LEFT JOIN USER T0 ON T.'USERID'=T0.'_id'");
            builder.append(" LEFT JOIN VOTES T1 ON T.'VOTEID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Item loadCurrentDeep(Cursor cursor, boolean lock) {
        Item entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);
        offset += daoSession.getUserDao().getAllColumns().length;

        Votes votes = loadCurrentOther(daoSession.getVotesDao(), cursor, offset);
        entity.setVotes(votes);

        return entity;    
    }

    public Item loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Item> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Item> list = new ArrayList<Item>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Item> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Item> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
